from apache_beam.transforms.external import JavaExternalTransform
from apache_beam.transforms import PTransform

class ${schema.className}(PTransform):

  #if ($schema.constructorArgs.size() == 0 && $schema.configurers.size() == 1)
  def __init__(self, expansion_service):
    self.expansion_service = expansion_service
  #else
  def __init__(self,
                expansion_service,
              #foreach ($argument in $schema.constructorArgs)
              ${argument.argumentName}#if($foreach.hasNext), #end #Java Type $argument.type
              #end
              #if($schema.configurers.size() >= 1)
                ,
                #foreach ($configurer in $schema.configurers)
                ${configurer.argument.argumentName} = None#if($foreach.hasNext), #end #Java Type $configurer.argument.type
                #end
              #end
              ):
      self.expansion_service = expansion_service
      #foreach ($argument in $schema.constructorArgs)
      self.${argument.argumentName} = ${argument.argumentName}
      #end
      #foreach ($configurer in $schema.configurers)
      self.${configurer.argument.argumentName} = ${configurer.argument.argumentName}
      #end
  #end

  def generate_java_transform(self):
    base_transform = (JavaExternalTransform('${schema.classPath}', expansion_service=self.expansion_service))
    constructed_transform = base_transform#if($schema.isConstructorStatic).${schema.constructorName}#end(
    #foreach($argument in $schema.constructorArgs)
        self.${argument.argumentName}#if($foreach.hasNext), #end
    #end
    )#foreach($configurer in $schema.configurers).${configurer.configurerName}(self.${configurer.argument.argumentName})#end

  def expand(self, pcoll):
    java_transform = generate_java_transform(self)
    return(
        pcoll
        | '${schema.className}' >> java_transform